#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (c) 2014-2019 Hugh Pyle

"""
Print patterns on paper-tape.

Source material for patterns are in files in a subdirectory 'patterns'.
Each pattern-file has data in Python literal format that defines things we can print.
(The format looks like JSON but isn't... so that we can use expressions like '0b11110000' to write binary).

At the top level are names, so you can call this script with:
    pattern pattern_file pattern_name
If no pattern-name is specified, it'll look for the name called "pattern".


Things you can do in this file format:
{
    # A named pattern which is a list of bytes (as long as you like).
    # 'None' is the same as a zero byte.
    "pattern_name": [
        0b00011000,         # note the first five bits are "below the track" and last three bits are "above the track"
        0b01111110,
        0b00100100,
        None
    ]

    # A pattern that includes repeating 'pattern_name' 10 times
    "example2": [
        0b1111111,
        { 10: "pattern_name" }
        0b1111111
    ]

    # A repeated list... nest these any way you want
    "example3": [
        { 10: [1, 2, 3, 4, 5] }
    ]
}
"""

import os
import sys
import ast
import click


# Escape sequence to initialize (turn off wordwrap, NLCR, delays)
# (Usually a teletype wouldn't have firmware that handles escape sequences, but mine does, for this purpose)
# (https://github.com/hughpyle/ASR33/tree/master/firmware)
INIT = b"\033[?7l\033_ab\234"
RESET = b"\033[!p"

PATTERN_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "patterns")
ALL_PATTERNS = sorted([os.path.splitext(filename)[0] for filename in os.listdir(PATTERN_PATH)])


class Operator(object):
    """Decorator, declares a method to be an operator"""
    def __init__(self, operator_name):
        self.operator_name = operator_name

    def __call__(self, func):
        """Called at decoration time"""
        # Set or extend the function's "operator_name" attribute
        func.operator_name = self.operator_name
        # The decorated function is unchanged
        return func


class Pattern:

    data = {}
    operators = [
        "invert"
    ]

    def __init__(self, pattern):
        self.load_pattern(pattern)

    def load_pattern(self, pattern):
        """
        Load a pattern from file.
        """
        pattern_filename = os.path.join(PATTERN_PATH, pattern)
        if not os.path.isfile(pattern_filename):
            click.get_current_context().fail("Pattern not found ({})".format(pattern_filename))
        with open(pattern_filename, "r") as fd:
            self.data = ast.literal_eval(fd.read())

    def parts(self):
        """
        :return: A list of the available parts in the pattern-file.
        """
        return self.data.keys()

    def operator(self, value_tuple):
        """
        Apply an operator to a value.
        :param value_tuple: (operator, value, optional other parameters)
        :return: the result of the operator.
        """
        print(value_tuple)
        oper = value_tuple[0]
        value = self.render_value(value_tuple[1])
        more_args = value_tuple[2:]
        for attr in dir(self):
            obj = getattr(self, attr)
            if callable(obj) and hasattr(obj, "operator_name") and getattr(obj, "operator_name") == oper:
                print(value)
                print(more_args)
                if more_args:
                    return obj(value, *more_args)
                else:
                    return obj(value)
        raise ValueError("Unknown operator: '{}'".format(oper))

    @Operator("invert")
    def invert(self, value):
        """Invert the bits of the value"""
        return b"".join([int.to_bytes(0xFF ^ byte, 1, byteorder="little") for byte in value])

    @Operator("mirror")
    def mirror(self, value):
        """Reverse the bits of the value"""
        return b"".join([int.to_bytes(int('{:08b}'.format(byte)[::-1], 2), 1, byteorder="little") for byte in value])

    @Operator("shift")
    def shift(self, value, n):
        """Shift the bits left by 'n' (right if n is negative)"""
        if n > 0:
            return b"".join([int.to_bytes((byte << n) & 0xFF, 1, byteorder="little") for byte in value])
        else:
            return b"".join([int.to_bytes((byte >> -n) & 0xFF, 1, byteorder="little") for byte in value])

    @Operator("subset")
    def subset(self, value, n):
        """Return a subset of the value"""
        if n > 0:
            # The first n bytes of the value
            return value[:n]
        else:
            # The last n bytes of the value
            return value[n:]

    def render_value(self, v):
        """
        Produce bytes from the expression
        :param v: A part-name, or a simple value, or a string with a Python literal expression.
        :return: Bytes.
        """
        return b"".join(list(self.generate_value(v)))

    def generate_value(self, value):
        """
        Generate the parts from a value.
        :param value: A part-name, or a simple value, or a string with a Python literal expression.
        :return: A generator that produces bytes.
        """
        if value is None:
            yield b'\0'
        elif isinstance(value, bytes):
            yield value
        elif isinstance(value, int):
            yield int.to_bytes(value, 1, byteorder="little")
        elif isinstance(value, str):
            yield self.render(value)
        elif isinstance(value, dict):
            # Dictionary - key is numeric: a number of times that the value should be repeated
            # - negative numbers mean that the value is repeated in reverse
            for k in value.keys():
                if isinstance(k, int):
                    # Key is an integer, number of times to repeat the value
                    if k > 0:
                        yield k * self.render_value(value[k])
                    else:
                        yield (-k) * self.render_value(value[k])[::-1]
                else:
                    raise ValueError("Expected an integer key, not {}: {}".format(type(k), value))
        elif isinstance(value, tuple):
            # Tuple - first element is the name of an operator that is applied to the other elements
            # The other elements will vary according to the operator
            yield self.operator(value)
        elif isinstance(value, list):
            # List - render each element in turn
            for val in value:
                yield self.render_value(val)
        else:
            raise ValueError("Don't know how to render: {}".format(value))

    def render(self, part):
        """
        Generate bytes from a part
        :param part: A part-name, or a string with a Python literal expression.
        :return: Bytes.
        """
        key = part
        if key in self.data:
            value = self.data[key]
        else:
            # Hmm, maybe the key is a python literal
            try:
                value = ast.literal_eval(key)
            except ValueError:
                raise ValueError("The pattern has no part named '{}'".format(key))
        return self.render_value(value)


@click.command()
@click.argument("pattern", type=click.Path())
@click.argument("part", default="pattern", required=False)
@click.option("--test", is_flag=True, help="Write text preview, not binary")
def main(pattern, part, test):
    """Print patterns to punchtape"""

    # Load the pattern-definition file
    patt = Pattern(pattern)

    # Render the named part from the file.
    # Instead of a name, you can also supply a string containing a Python literal.
    data = patt.render(part)

    if not test:
        # Put the tty firmware into 'raw binary' mode
        sys.stdout.buffer.write(INIT)

    if test:
        for byte in data:
            sys.stdout.write("{:08b}\n".format(byte).replace("0", ".").replace("1", "*"))
    else:
        sys.stdout.buffer.write(bytearray(data))

    if not test:
        sys.stdout.buffer.write(RESET)


main()

